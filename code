import os
import re
import logging
import pymysql
import traceback
from typing import List, Optional, Dict, Any
from datetime import datetime, date, timedelta
import json
import calendar
import sqlparse
from langchain_community.utilities import SQLDatabase
from langchain_ollama import OllamaLLM
from langchain.chains import create_sql_query_chain

today_date = date.today()

# --- TEAM DETAILS CONFIGURATION ---
TEAM_DB_CONFIG = {
    "name": "Team Details",
    "db_config": {
        "host": "localhost",
        "user": "root",
        "password": "root123",
        "database": "EIS_n"
    },
    "include_tables": ["UserMaster"],
}

# Blocked patterns for security
BLOCKED_PATTERNS = [
    r"\brm\b", r"\bkill\b", r"\breboot\b", r"\bshutdown\b", r"\buserdel\b",
    r"\bpasswd\b", r"\bmkfs\b", r"\bwget\b", r"\bcurl\b", r":\s*(){:|:&};:",
    r"\bsudo\b", r"\bsu\b", r"\bchmod\b", r"\bchown\b", r"\bdd\b",
    r"\bmount\s+/", r"\bumount\b", r"\bfdisk\b", r"\bparted\b", r"\bmkfs\b",
    r"\biptables\b", r"\bufw\b", r"\bfirewall\b", r"\bselinux\b"
]

# Sensitive fields that should never be included in queries or results
SENSITIVE_FIELDS = ["Pwd", "SecQ", "SecA"]

def get_comprehensive_date_context():
    """Generate comprehensive date context for robust LLM understanding"""
    current_date = date.today()
    current_year = current_date.year
    current_month = current_date.month

    # Create month name mappings (case insensitive)
    month_names = {
        'january': 1, 'jan': 1, 'february': 2, 'feb': 2, 'march': 3, 'mar': 3,
        'april': 4, 'apr': 4, 'may': 5, 'june': 6, 'jun': 6,
        'july': 7, 'jul': 7, 'august': 8, 'aug': 8, 'september': 9, 'sep': 9,
        'october': 10, 'oct': 10, 'november': 11, 'nov': 11, 'december': 12, 'dec': 12
    }

    month_numbers = {v: k.title() for k, v in month_names.items() if len(k) > 3}  # Full names only

    return {
        'current_date': current_date.strftime('%Y-%m-%d'),
        'current_year': current_year,
        'current_month': current_month,
        'current_month_name': month_numbers[current_month],
        'next_year': current_year + 1,
        'prev_year': current_year - 1,
        'month_names': month_names,
        'month_numbers': month_numbers,
        'years_range': list(range(current_year - 5, current_year + 10))  # Support wide range
    }

def preprocess_question(question: str) -> str:
    """Preprocess the question to handle common patterns and extract explicit date info"""
    question_lower = question.lower().strip()

    # Field mappings for better query understanding
    field_mappings = {
        "phone": "Contact",
        "mobile": "Contact",
        "contact": "Contact",
        "phone_number": "Contact",
        "employee_id": "Uid",
        "emp_id": "Uid",
        "id": "Uid",
        "name": "EmpName",
        "employee_name": "EmpName",
        "emp_name": "EmpName",
        "email": "TcsEmail",
        "tcs_email": "TcsEmail",
        "sbi_email": "SbiEmail",
        "ad_id": "AdId",
        "position": "Position",
        "level": "Level",
        "team": "Team",
        "project": "Project",
        "joined": "TcsDoj",
        "join_date": "TcsDoj",
        "joining": "TcsDoj",
        "tcs_doj": "TcsDoj"
    }

    # Apply field mappings
    processed_question = question_lower
    for term, field in field_mappings.items():
        pattern = rf'\b{re.escape(term)}\b'
        processed_question = re.sub(pattern, field, processed_question, flags=re.IGNORECASE)

    # Extract explicit month-year patterns for joining dates
    month_year_patterns = [
        r'\b(january|jan|february|feb|march|mar|april|apr|may|june|jun|july|jul|august|aug|september|sep|october|oct|november|nov|december|dec)\s+(\d{4})\b',
        r'\b(\d{4})\s+(january|jan|february|feb|march|mar|april|apr|may|june|jun|july|jul|august|aug|september|sep|october|oct|november|nov|december|dec)\b',
        r'\b(\d{1,2})/(\d{4})\b',  # MM/YYYY
        r'\b(\d{4})/(\d{1,2})\b'   # YYYY/MM
    ]

    date_ctx = get_comprehensive_date_context()
    extracted_info = {}

    # Check for relative date terms first
    if re.search(r'\bthis\s+(month|year)\b', question_lower):
        if 'this month' in question_lower:
            extracted_info['month'] = date_ctx['current_month']
            extracted_info['year'] = date_ctx['current_year']
            extracted_info['context'] = 'this_month'
        elif 'this year' in question_lower:
            extracted_info['year'] = date_ctx['current_year']
            extracted_info['context'] = 'this_year'
    elif re.search(r'\bnext\s+(month|year)\b', question_lower):
        if 'next month' in question_lower:
            next_month = date_ctx['current_month'] + 1
            next_year = date_ctx['current_year']
            if next_month > 12:
                next_month = 1
                next_year += 1
            extracted_info['month'] = next_month
            extracted_info['year'] = next_year
            extracted_info['context'] = 'next_month'
        elif 'next year' in question_lower:
            extracted_info['year'] = date_ctx['next_year']
            extracted_info['context'] = 'next_year'
    else:
        # Extract explicit month-year patterns
        for pattern in month_year_patterns:
            match = re.search(pattern, question_lower)
            if match:
                groups = match.groups()
                if len(groups) == 2:
                    # Determine which is month and which is year
                    for group in groups:
                        if group.isdigit():
                            num = int(group)
                            if 1900 <= num <= 2100:  # Year
                                extracted_info['year'] = num
                            elif 1 <= num <= 12:  # Month number
                                extracted_info['month'] = num
                        else:
                            # Month name
                            if group in date_ctx['month_names']:
                                extracted_info['month'] = date_ctx['month_names'][group]
                    extracted_info['context'] = 'specific_month_year'
                break

    # Add extracted information to question for LLM
    if extracted_info:
        addition = f" [EXTRACTED: "
        if 'month' in extracted_info:
            addition += f"month={extracted_info['month']} "
        if 'year' in extracted_info:
            addition += f"year={extracted_info['year']} "
        if 'context' in extracted_info:
            addition += f"context={extracted_info['context']} "
        addition += "]"
        processed_question += addition

        print(f"DEBUG - Extracted date info: {extracted_info}")
        print(f"DEBUG - Enhanced question: {processed_question}")

    return processed_question

def get_sql_generation_prompt():
    """Generate comprehensive SQL prompt with extensive examples for team data"""
    date_ctx = get_comprehensive_date_context()

    return f"""You are an expert SQL query generator for a Team/Employee database.

**CURRENT DATE CONTEXT:**
- Today's date: {date_ctx['current_date']}
- Current year: {date_ctx['current_year']}
- Current month: {date_ctx['current_month']} ({date_ctx['current_month_name']})
- Next year: {date_ctx['next_year']}
- Previous year: {date_ctx['prev_year']}

**MONTH NAME TO NUMBER MAPPING:**
{chr(10).join([f"- {name.title()}: {num}" for name, num in date_ctx['month_names'].items() if len(name) > 3])}

**DATABASE SCHEMA:**
Table: UserMaster
- Uid (INT): Unique employee identifier
- EmpName (TEXT): Employee name
- Contact (TEXT): Phone number
- TcsEmail (TEXT): TCS email address
- SbiEmail (TEXT): SBI email address
- AdId (TEXT): Active Directory ID
- Position (TEXT): Job position
- Level (TEXT): Employee level
- Team (TEXT): Team name
- Project (TEXT): Project name
- TcsDoj (TEXT): TCS Date of Joining in 'YYYY-MM-DD' format
- NEVER include sensitive fields: Pwd, SecQ, SecA

**CRITICAL SQL GENERATION RULES:**
1. ONLY generate SELECT statements
2. Always use exact table name: UserMaster
3. For date columns (TcsDoj), use: STR_TO_DATE(TcsDoj, '%Y-%m-%d') for date functions
4. For text fields, use LIKE with % wildcards: column_name LIKE '%search_term%'
5. For Uid, use exact equality: Uid = number
6. NEVER add LIMIT unless specifically requested
7. Return ONLY the SQL query - no explanations or markdown
8. **CRITICAL**: When a specific month and year are mentioned (like "October 2024"), do NOT include current date comparisons
9. **CRITICAL**: For "this month" queries, ALWAYS include both month AND year filters
10. **NEVER include or select sensitive fields: Pwd, SecQ, SecA**

**DATE QUERY PATTERNS:**

**Relative Date Queries (MUST include current year):**
- "this month" → MONTH(STR_TO_DATE(TcsDoj, '%Y-%m-%d')) = {date_ctx['current_month']} AND YEAR(STR_TO_DATE(TcsDoj, '%Y-%m-%d')) = {date_ctx['current_year']}
- "this year" → YEAR(STR_TO_DATE(TcsDoj, '%Y-%m-%d')) = {date_ctx['current_year']}
- "next year" → YEAR(STR_TO_DATE(TcsDoj, '%Y-%m-%d')) = {date_ctx['next_year']}

**Specific Month-Year Queries (NO current date filters):**
- "October 2024" → MONTH(STR_TO_DATE(TcsDoj, '%Y-%m-%d')) = 10 AND YEAR(STR_TO_DATE(TcsDoj, '%Y-%m-%d')) = 2024
- "March 2025" → MONTH(STR_TO_DATE(TcsDoj, '%Y-%m-%d')) = 3 AND YEAR(STR_TO_DATE(TcsDoj, '%Y-%m-%d')) = 2025

**EXTRACTED DATE INFO HANDLING:**
If question contains [EXTRACTED: month=X year=Y context=Z], use these rules:
- context=this_month → Use month AND current year, no current date filter
- context=specific_month_year → Use ONLY the specified month and year, NO current date filter
- context=this_year → Use only current year
- month=10 year=2024 context=specific_month_year → MONTH(...) = 10 AND YEAR(...) = 2024

**ROBUST QUERY EXAMPLES:**
- "employee 123" → SELECT Uid, EmpName, Project, Team, Contact, TcsEmail, Position, Level FROM UserMaster WHERE Uid = 123
- "who is Aryan" → SELECT Uid, EmpName, Project, Team, Contact, TcsEmail, Position, Level FROM UserMaster WHERE EmpName LIKE '%Aryan%'
- "employees in Team IIB" → SELECT Uid, EmpName, Project, Team, Contact, TcsEmail, Position, Level FROM UserMaster WHERE Team LIKE '%IIB%'
- "joined this month" → SELECT Uid, EmpName, Project, Team, TcsDoj FROM UserMaster WHERE MONTH(STR_TO_DATE(TcsDoj, '%Y-%m-%d')) = {date_ctx['current_month']} AND YEAR(STR_TO_DATE(TcsDoj, '%Y-%m-%d')) = {date_ctx['current_year']}
- "joined in October 2024" → SELECT Uid, EmpName, Project, Team, TcsDoj FROM UserMaster WHERE MONTH(STR_TO_DATE(TcsDoj, '%Y-%m-%d')) = 10 AND YEAR(STR_TO_DATE(TcsDoj, '%Y-%m-%d')) = 2024
- "count employees by team" → SELECT Team, COUNT(*) as employee_count FROM UserMaster GROUP BY Team
- "employees with gmail" → SELECT Uid, EmpName, TcsEmail FROM UserMaster WHERE TcsEmail LIKE '%gmail%'

**EXAMPLES WITH EXTRACTED INFO:**
- [EXTRACTED: month=10 year=2024 context=this_month] → MONTH(...) = 10 AND YEAR(...) = 2024
- [EXTRACTED: month=6 year=2026 context=specific_month_year] → MONTH(...) = 6 AND YEAR(...) = 2026
- [EXTRACTED: year=2025 context=this_year] → YEAR(...) = 2025

**ERROR PREVENTION:**
- Always use proper STR_TO_DATE syntax for TcsDoj
- **NEVER use CURDATE() when specific month-year is mentioned**
- Use CURDATE() ONLY for queries like "today", "from today", "current date"
- For "this month" queries, include both MONTH() = current_month AND YEAR() = current_year
- Check column names match exactly: TcsDoj (not Doj, not JoinDate)
- Use proper quotes: single quotes for strings, no quotes for numbers
- Ensure proper AND/OR logic for multiple conditions
- **NEVER include sensitive fields: Pwd, SecQ, SecA in SELECT or WHERE clauses**
- Always select meaningful columns, avoid SELECT * unless specifically requested

**USER QUESTION:** {{question}}
"""

# Setup logging
logging.basicConfig(
    filename=os.path.expanduser("~/.team_details_ai.log"),
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def is_dangerous(text: str) -> bool:
    """Check if text contains dangerous patterns"""
    return any(re.search(pattern, text.lower()) for pattern in BLOCKED_PATTERNS)

def clean_and_fix_sql(raw_sql: str) -> str:
    """Enhanced SQL cleaning with better error handling"""
    print(f"DEBUG - Raw SQL input: {repr(raw_sql)}")
    raw_sql = sqlparse.format(raw_sql, strip_comments=True).strip()
    print(f"DEBUG - After sqlparse formatting: {raw_sql}")
    
    # Handle common LLM response patterns
    if "i cannot" in raw_sql.lower() or "i can't" in raw_sql.lower():
        print("DEBUG - LLM refused to generate SQL")
        return "ERROR: LLM refused to generate SQL"

    # Extract from code blocks
    code_block_match = re.search(r"```(?:sql)?\s*(.*?)\s*```", raw_sql, re.DOTALL | re.IGNORECASE)
    if code_block_match:
        sql = code_block_match.group(1).strip()
        print(f"DEBUG - Extracted from code block: {sql}")
    else:
        sql = raw_sql.strip()

    # Remove common prefixes/suffixes
    sql = re.sub(r'^(here is|here\'s|sql query|query|the query is)?\s*:?\s*', '', sql, flags=re.IGNORECASE)
    sql = re.sub(r'\s*;?\s*$', '', sql)

    # Find SELECT statement
    select_match = re.search(r'(SELECT\s+.*?)(?:\n\s*$|$)', sql, re.IGNORECASE | re.DOTALL)
    if select_match:
        sql = select_match.group(1).strip()
        print(f"DEBUG - Extracted SELECT statement: {sql}")

    # Handle specific employee ID/name queries
    if not sql.upper().startswith('SELECT'):
        # Try to extract employee ID
        if re.search(r'\bemployee\b.*\b\d+\b', raw_sql.lower()) or re.search(r'\buid\b.*\b\d+\b', raw_sql.lower()):
            uid_match = re.search(r'\b(\d+)\b', raw_sql)
            if uid_match:
                uid = uid_match.group(1)
                sql = f"SELECT Uid, EmpName, Project, Team, Contact, TcsEmail, Position, Level FROM UserMaster WHERE Uid = {uid}"
                print(f"DEBUG - Generated employee ID query: {sql}")
        # Try to extract name
        elif re.search(r'\bwho is\b', raw_sql.lower()) or re.search(r'\bemployee.*name\b', raw_sql.lower()):
            name_match = re.search(r'\bwho is\s+(\w+)', raw_sql.lower())
            if name_match:
                name = name_match.group(1)
                sql = f"SELECT Uid, EmpName, Project, Team, Contact, TcsEmail, Position, Level FROM UserMaster WHERE EmpName LIKE '%{name}%'"
                print(f"DEBUG - Generated name query: {sql}")

    # Remove sensitive fields from any part of the query
    for field in SENSITIVE_FIELDS:
        # Remove from SELECT list
        sql = re.sub(rf'\b{field}\b\s*,?\s*', '', sql, flags=re.IGNORECASE)
        sql = re.sub(rf',\s*\b{field}\b', '', sql, flags=re.IGNORECASE)
        # Remove WHERE conditions involving sensitive fields
        sql = re.sub(rf'\bWHERE\s+\b{field}\b[^A-Z]*?(?=\s+(AND|OR|ORDER|GROUP|LIMIT|$))', 'WHERE ', sql, flags=re.IGNORECASE)
        sql = re.sub(rf'\b(AND|OR)\s+\b{field}\b[^A-Z]*?(?=\s+(AND|OR|ORDER|GROUP|LIMIT|$))', '', sql, flags=re.IGNORECASE)

    # Clean up any leftover commas or empty WHERE clauses
    sql = re.sub(r',\s*,', ',', sql)
    sql = re.sub(r'SELECT\s*,', 'SELECT ', sql, flags=re.IGNORECASE)
    sql = re.sub(r',\s*FROM', ' FROM', sql, flags=re.IGNORECASE)
    sql = re.sub(r'WHERE\s+AND', 'WHERE', sql, flags=re.IGNORECASE)
    sql = re.sub(r'WHERE\s+OR', 'WHERE', sql, flags=re.IGNORECASE)
    sql = re.sub(r'WHERE\s*$', '', sql, flags=re.IGNORECASE)

    # Convert exact matches to LIKE for text fields (except Uid)
    text_fields = ['EmpName', 'Contact', 'TcsEmail', 'SbiEmail', 'AdId', 'Position', 'Level', 'Team', 'Project']
    for field in text_fields:
        # Convert = to LIKE for text fields only
        sql = re.sub(f"({field})\\s*=\\s*'([^']*)'", f"\\1 LIKE '%\\2%'", sql, flags=re.IGNORECASE)
        sql = re.sub(f"({field})\\s*=\\s*\"([^\"]*)\"", f"\\1 LIKE '%\\2%'", sql, flags=re.IGNORECASE)

    # Remove trailing semicolons
    sql = sql.strip().rstrip(";")

    # Add reasonable limit if none exists and it's not a COUNT/GROUP BY query
    if (not re.search(r"\bLIMIT\b", sql, re.IGNORECASE) and 
        not re.search(r"\bCOUNT\s*\(", sql, re.IGNORECASE) and
        not re.search(r"\bGROUP\s+BY\b", sql, re.IGNORECASE)):
        sql += " LIMIT 50"

    print(f"DEBUG - Final cleaned SQL: {sql}")
    return sql

def validate_and_fix_sql(sql: str) -> tuple[str, bool]:
    """Validate SQL and attempt to fix common issues"""
    fixed_sql = sqlparse.format(sql, strip_comments=True).strip()
    print(f"DEBUG - Validating SQL: {fixed_sql}")
    
    # Check if it's a valid SELECT query
    if not fixed_sql.upper().strip().startswith('SELECT'):
        print("DEBUG - Not a SELECT query")
        return fixed_sql, False

    # Check for dangerous operations
    dangerous_ops = ['insert', 'update', 'delete', 'drop', 'alter', 'create', 'truncate']
    if any(op in fixed_sql.lower() for op in dangerous_ops):
        print("DEBUG - Contains dangerous operations")
        return fixed_sql, False

    # Check for sensitive fields
    for field in SENSITIVE_FIELDS:
        if field.lower() in fixed_sql.lower():
            print(f"DEBUG - Contains sensitive field: {field}")
            return fixed_sql, False

    # Try to fix common syntax issues
    # Fix missing table name
    if 'from usermaster' in fixed_sql.lower():
        fixed_sql = re.sub(r'from\s+usermaster', 'FROM UserMaster', fixed_sql, flags=re.IGNORECASE)

    # Fix date function syntax issues
    fixed_sql = re.sub(r'STR_TO_DATE\s*\(\s*([^,]+),\s*["\']%Y-%m-%d["\']\s*\)',
                      r"STR_TO_DATE(\1, '%Y-%m-%d')", fixed_sql)

    print(f"DEBUG - Fixed SQL: {fixed_sql}")
    if not fixed_sql.endswith(";"):
        fixed_sql += ";"
    return fixed_sql, True

def format_query_results_natural(result: List[Dict], question: str) -> str:
    """Enhanced result formatting with better handling of large datasets"""
    if not result:
        return "I couldn't find any employee records matching your criteria."

    # Handle single value results (like COUNT)
    if len(result) == 1 and len(result[0]) == 1:
        value = list(result[0].values())[0]
        if "count" in question.lower():
            return f"There are {value} employee records matching your criteria."
        else:
            return f"The result is: {value}"

    # Handle single record
    if len(result) == 1:
        record = result[0]
        response = f"I found 1 employee record:\n\n"

        # Format key information naturally
        if 'Uid' in record:
            response += f"🆔 Employee ID: {record['Uid']}\n"
        if 'EmpName' in record:
            response += f"👤 Name: {record['EmpName']}\n"
        if 'Contact' in record:
            response += f"📞 Contact: {record['Contact']}\n"
        if 'TcsEmail' in record:
            response += f"📧 TCS Email: {record['TcsEmail']}\n"
        if 'SbiEmail' in record:
            response += f"📧 SBI Email: {record['SbiEmail']}\n"
        if 'AdId' in record:
            response += f"🔑 AD ID: {record['AdId']}\n"
        if 'Position' in record:
            response += f"💼 Position: {record['Position']}\n"
        if 'Level' in record:
            response += f"📊 Level: {record['Level']}\n"
        if 'Team' in record:
            response += f"👥 Team: {record['Team']}\n"
        if 'Project' in record:
            response += f"📂 Project: {record['Project']}\n"
        if 'TcsDoj' in record:
            response += f"📅 TCS Joining Date: {record['TcsDoj']}\n"

        return response.strip()

    # Handle multiple records - provide summary + tabular format
    response = f"I found {len(result)} employee records matching your criteria:\n\n"

    # Add summary information
    if 'Team' in result[0]:
        team_counts = {}
        for record in result:
            team = record.get('Team', 'Unknown')
            team_counts[team] = team_counts.get(team, 0) + 1

        response += "📊 Team Summary:\n"
        for team, count in team_counts.items():
            response += f"   • {team}: {count} employees\n"
        response += "\n"

    # Show detailed results based on count
    if len(result) <= 10:
        response += "📋 Detailed Results:\n"
        response += format_query_results_tabular(result)
    elif len(result) <= 50:
        response += f"📋 First 10 Results (of {len(result)} total):\n"
        response += format_query_results_tabular(result[:10])
        response += f"\n... and {len(result) - 10} more records."
    else:
        response += f"📋 Sample Results (showing 5 of {len(result)} total):\n"
        response += format_query_results_tabular(result[:5])
        response += f"\n... and {len(result) - 5} more records."

    return response

def format_query_results_tabular(result: List[Dict]) -> str:
    """Format results in a clean table"""
    if not result:
        return "No records found."

    # Select most important columns for display
    important_cols = ['Uid', 'EmpName', 'Team', 'Project', 'Contact', 'Position']
    available_cols = [col for col in important_cols if col in result[0]]

    if not available_cols:
        available_cols = list(result[0].keys())[:6]  # First 6 columns

    output = []

    # Calculate column widths
    col_widths = {}
    for col in available_cols:
        max_width = len(col)
        for row in result:
            if row.get(col):
                max_width = max(max_width, len(str(row[col])))
        col_widths[col] = min(max_width, 50)  # Max 50 chars per column

    # Header
    header = " | ".join(col.ljust(col_widths[col]) for col in available_cols)
    separator = "-+-".join("-" * col_widths[col] for col in available_cols)
    output.append(header)
    output.append(separator)

    # Rows
    for row in result:
        formatted_row = " | ".join(
            str(row.get(col, 'NULL'))[:col_widths[col]-3] + "..."
            if len(str(row.get(col, 'NULL'))) > col_widths[col]
            else str(row.get(col, 'NULL')).ljust(col_widths[col])
            for col in available_cols
        )
        output.append(formatted_row)

    return "\n".join(output)

class TeamDetailsAssistant:
    def __init__(self):
        self.llm = None
        self.db_handler = None
        self.initialized = False
        self.chat_history = []

    def initialize(self):
        """Initialize the Team Details Assistant"""
        try:
            # Initialize LLM with better parameters
            self.llm = OllamaLLM(model="myllm:latest", temperature=0.0)  # Lower temperature for consistency

            # Set up database connection
            db_cfg = TEAM_DB_CONFIG['db_config']
            uri = f"mysql+pymysql://{db_cfg['user']}:{db_cfg['password']}@{db_cfg['host']}/{db_cfg['database']}"

            # Connect to database
            db_for_llm = SQLDatabase.from_uri(
                uri,
                include_tables=TEAM_DB_CONFIG.get("include_tables"),
                engine_args={
                    "pool_pre_ping": True,
                    "pool_recycle": 3600,
                    "connect_args": {
                        "connect_timeout": 30,
                        "read_timeout": 30,
                        "charset": "utf8mb4"
                    }
                }
            )

            # Create query chain
            chain = create_sql_query_chain(self.llm, db_for_llm)

            # Create direct connection for executing queries
            db_conn = pymysql.connect(
                host=db_cfg['host'],
                user=db_cfg['user'],
                password=db_cfg['password'],
                database=db_cfg['database'],
                charset='utf8mb4',
                cursorclass=pymysql.cursors.DictCursor,
                autocommit=True,
                connect_timeout=30,
                read_timeout=30
            )

            self.db_handler = {
                'chain': chain,
                'connection': db_conn,
                'config': TEAM_DB_CONFIG
            }

            self.initialized = True
            return True

        except Exception as e:
            logger.error(f"Initialization failed: {e}\n{traceback.format_exc()}")
            return False

    def query_team_details(self, question: str) -> str:
        """Enhanced query processing with better error handling"""
        if not self.db_handler:
            return "❌ Team Details database not available."

        try:
            print(f"DEBUG - Original question: {question}")

            # Preprocess question to extract date information and field mappings
            enhanced_question = preprocess_question(question)

            # Get date context
            date_ctx = get_comprehensive_date_context()

            # Create comprehensive context for the LLM
            context_info = f"""
CURRENT DATE CONTEXT:
- Today: {date_ctx['current_date']}
- Current Year: {date_ctx['current_year']}
- Current Month: {date_ctx['current_month']} ({date_ctx['current_month_name']})
- Next Year: {date_ctx['next_year']}

IMPORTANT INSTRUCTIONS:
- For month names like 'October', 'March', etc., use the corresponding month number
- October = 10, March = 3, January = 1, December = 12, etc.
- Always use STR_TO_DATE function for date columns (TcsDoj)
- For 'October 2024' queries, use: MONTH(...) = 10 AND YEAR(...) = 2024
- For 'this month' queries, use: MONTH(...) = current_month AND YEAR(...) = current_year
- For 'joined' or 'joining' queries, use the TcsDoj column
- NEVER use CURDATE() when specific month-year is mentioned
- For "this month" always include both month and year filters
- **NEVER include or select sensitive fields: Pwd, SecQ, SecA**
- Always select meaningful columns like: Uid, EmpName, Project, Team, Contact, TcsEmail, Position, Level
- Use LIKE with % for text searches: EmpName LIKE '%name%'

QUESTION: {enhanced_question}
"""

            # Generate SQL using the chain
            max_retries = 3
            for attempt in range(max_retries):
                try:
                    print(f"DEBUG - Attempt {attempt + 1} generating SQL")
                    raw_sql = self.db_handler['chain'].invoke({"question": context_info})
                    print(f"DEBUG - Raw SQL from LLM: {repr(raw_sql)}")
                    break
                except Exception as e:
                    print(f"DEBUG - SQL generation failed on attempt {attempt + 1}: {e}")
                    if attempt == max_retries - 1:
                        return f"❌ Failed to generate SQL query after {max_retries} attempts: {str(e)}"
                    continue

            # Clean and validate SQL
            sql = clean_and_fix_sql(raw_sql)
            sql, is_valid = validate_and_fix_sql(sql)

            if not is_valid:
                return f"❌ Invalid SQL query generated. Raw: {repr(raw_sql)}\nCleaned: {sql}"

            print(f"DEBUG - Final SQL: {sql}")
            logger.info(f"Executing SQL: {sql}")

            # Execute query with error handling
            try:
                with self.db_handler['connection'].cursor() as cursor:
                    cursor.execute(sql)
                    result = cursor.fetchall()
                    print(f"DEBUG - Query returned {len(result)} rows")

                    if not result:
                        suggestions = self._generate_suggestions(question, sql)
                        return f"I couldn't find any employee records matching your criteria.\n\n{suggestions}"

                    # Format and return results
                    return format_query_results_natural(result, question)

            except pymysql.Error as db_error:
                error_code = getattr(db_error, 'args', [None])[0] if hasattr(db_error, 'args') else None
                error_msg = f"❌ Database Error (Code: {error_code}): {str(db_error)}\n"
                error_msg += f"SQL: {sql}\n"

                # Try to provide helpful suggestions based on error type
                if "syntax error" in str(db_error).lower():
                    error_msg += "This appears to be a SQL syntax error. "
                elif "unknown column" in str(db_error).lower():
                    error_msg += "This appears to be a column name error. Available columns: Uid, EmpName, Contact, TcsEmail, SbiEmail, AdId, Position, Level, Team, Project, TcsDoj. "
                elif "table" in str(db_error).lower():
                    error_msg += "This appears to be a table name error. Use 'UserMaster' as the table name. "

                error_msg += "Please try rephrasing your question."
                logger.error(f"Database error: {db_error}\nSQL: {sql}")
                return error_msg

        except Exception as e:
            error_msg = f"❌ Error processing request: {str(e)}\n"
            error_msg += "Please try rephrasing your question."
            logger.error(f"Query processing error: {e}\n{traceback.format_exc()}")
            return error_msg

    def _generate_suggestions(self, question: str, sql: str) -> str:
        """Generate helpful suggestions when no results are found"""
        suggestions = "💡 Suggestions:\n"
        suggestions += "• Try using broader search terms\n"
        suggestions += "• Check if the name is spelled correctly\n"
        suggestions += "• Try searching by partial names (e.g., 'John' instead of 'John Smith')\n"
        suggestions += "• For date queries, verify the date range contains data\n"

        if "october" in question.lower() or "2024" in question:
            suggestions += "• For date queries like 'October 2024', ensure employees joined in that period\n"

        if "aryan" in question.lower():
            suggestions += "• Try variations like 'Aryan', 'ARYAN', or partial matches\n"

        suggestions += f"\n🔍 Query executed: {sql}"
        return suggestions

    def process_question(self, question: str) -> str:
        """Process questions with enhanced error handling"""
        if not self.initialized and not self.initialize():
            return "❌ Team Details Assistant initialization failed. Please check database connection."

        if is_dangerous(question):
            return "❌ Question blocked for security reasons."

        # Add to chat history
        self.chat_history.append(f"User: {question}")

        # Get response
        response = self.query_team_details(question)

        # Add response to history
        self.chat_history.append(f"Assistant: {response}")

        return response

    def start_interactive_session(self, query):
        """Process single query with comprehensive error handling"""
        if not self.initialize():
            return "❌ Failed to initialize Team Details Assistant. Check database connection."

        try:
            if query.lower() in ['exit', 'quit', 'q']:
                return "👋 Session ended."

            print("🔍 Processing your query...")
            response = self.process_question(query)
            return response

        except KeyboardInterrupt:
            return "👋 Session interrupted."
        except Exception as e:
            error_msg = f"❌ Session error: {str(e)}"
            logger.error(f"Session error: {e}\n{traceback.format_exc()}")
            return error_msg
        finally:
            # Clean up database connection
            try:
                if (self.db_handler and
                    self.db_handler.get('connection') and
                    hasattr(self.db_handler['connection'], 'open') and
                    self.db_handler['connection'].open):
                    self.db_handler['connection'].close()
            except Exception as cleanup_error:
                print(f"DEBUG - Cleanup error: {cleanup_error}")
                pass

def Teammain(query):
    """Main function to process team queries with enhanced robustness"""
    print("🚀 Starting Team Details Assistant...")
    assistant = TeamDetailsAssistant()
    result = assistant.start_interactive_session(query)
    print("✅ Query processing complete.")
    return result

# Test the function with comprehensive queries
if __name__ == "__main__":
    # Test with comprehensive queries including date scenarios
    test_queries = [
        "Show me employee with ID 12345",
        "Who is Aryan?",
        "List all employees named John",
        "Show me all employees in Team IIB",
        "Count employees by team",
        "How many employees joined TCS in October?",
        "Employees who joined this month",
        "Show employees who joined in 2024",
        "List employees in Project EIS",
        "Find employees with contact number containing 835",
        "Show all employees with gmail email",
        "Count total employees",
        "Employees in Level L1",
        "Show employees in Position Developer"
    ]

    for query in test_queries:
        print(f"\n{'='*60}")
        print(f"Testing: {query}")
        print('='*60)
        result = Teammain(query)
        print(result)
